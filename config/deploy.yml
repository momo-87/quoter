# Name of your application. Used to uniquely configure containers.
service: quoter


# Name of the container image.
image: christmomo/quoter


<% require "dotenv"; Dotenv.load(".env") %> # Load environment variables from .env file.


# Deploy to these servers.
servers:
  web:
    hosts:
      - 54.37.19.169
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs


# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: quoter.christianmomo.dev
  # Proxy connects to your container on port 80 by default.
  app_port: 5000
  healthcheck:
    path: /up
    interval: 7
    timeout: 49


# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  # username: christmomo
  username:
    - KAMAL_REGISTRY_USERNAME


  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD


# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>
# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    RAILS_ENV: production
    RACK_ENV: production
    DB_HOST: quoter-db
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_USER
    - POSTGRES_PASSWORD


# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"


# Use a different ssh user than root
#
ssh:
  user: debian


# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets


# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2


# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:17.0
    host: 54.37.19.169
    port: 127.0.0.1:5434:5432
    env:
      clear:
        POSTGRES_USER: postgres
        POSTGRES_DB: quoter_production
      secret:
        - POSTGRES_PASSWORD
    files:
      #       - config/mysql/production.cnf:/etc/mysql/my.cnf
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7.4
    host: 54.37.19.169
    port: 6370
    directories:
      - data:/data
